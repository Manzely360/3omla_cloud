"""
Signal models for storing trading signals and alerts
"""

from sqlalchemy import Column, String, Float, Integer, DateTime, Boolean, Text, Index
from sqlalchemy.dialects.postgresql import JSONB
from core.database import Base
from datetime import datetime


class Signal(Base):
    """Trading signals generated by the system"""
    __tablename__ = "signals"
    
    id = Column(Integer, primary_key=True, index=True)
    signal_id = Column(String(50), unique=True, nullable=False, index=True)
    signal_type = Column(String(20), nullable=False)  # 'lead_lag', 'opposite_move', 'breakout', 'mean_reversion'
    
    # Asset information
    primary_symbol = Column(String(20), nullable=False, index=True)
    secondary_symbol = Column(String(20), nullable=True, index=True)
    exchange = Column(String(20), nullable=False)
    interval = Column(String(10), nullable=False)
    
    # Signal details
    direction = Column(String(10), nullable=False)  # 'long', 'short'
    strength = Column(Float, nullable=False)  # Signal strength (0-1)
    confidence = Column(Float, nullable=False)  # Confidence level (0-1)
    
    # Price and timing
    trigger_price = Column(Float, nullable=False)
    trigger_time = Column(DateTime, nullable=False, index=True)
    expected_duration = Column(Integer, nullable=True)  # Expected duration in minutes
    
    # Historical performance
    historical_hit_rate = Column(Float, nullable=False)
    historical_profit_factor = Column(Float, nullable=True)
    avg_return = Column(Float, nullable=True)
    
    # Risk metrics
    stop_loss = Column(Float, nullable=True)
    take_profit = Column(Float, nullable=True)
    position_size = Column(Float, nullable=True)
    
    # Additional data (avoid reserved name 'metadata')
    extra_metadata = Column(JSONB, nullable=True)  # Additional signal metadata
    regime_context = Column(String(20), nullable=True)  # Market regime when signal was generated
    
    # Status
    status = Column(String(20), nullable=False, default='active')  # 'active', 'triggered', 'expired', 'cancelled'
    triggered_at = Column(DateTime, nullable=True)
    expired_at = Column(DateTime, nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    __table_args__ = (
        Index('idx_signal_type_time', 'signal_type', 'trigger_time'),
        Index('idx_symbol_trigger_time', 'primary_symbol', 'trigger_time'),
        Index('idx_status_created', 'status', 'created_at'),
    )


class Alert(Base):
    """User-configured alerts"""
    __tablename__ = "alerts"
    
    id = Column(Integer, primary_key=True, index=True)
    alert_id = Column(String(50), unique=True, nullable=False, index=True)
    user_id = Column(String(50), nullable=False, index=True)
    
    # Alert configuration
    alert_type = Column(String(20), nullable=False)  # 'lead_trigger', 'opposite_move', 'breakout', 'custom'
    name = Column(String(100), nullable=False)
    description = Column(Text, nullable=True)
    
    # Asset filters
    symbols = Column(JSONB, nullable=True)  # List of symbols to monitor
    exchanges = Column(JSONB, nullable=True)  # List of exchanges
    intervals = Column(JSONB, nullable=True)  # List of time intervals
    
    # Trigger conditions
    conditions = Column(JSONB, nullable=False)  # Alert trigger conditions
    thresholds = Column(JSONB, nullable=False)  # Threshold values
    
    # Notification settings
    notification_methods = Column(JSONB, nullable=False)  # ['email', 'webhook', 'websocket']
    webhook_url = Column(String(500), nullable=True)
    email_address = Column(String(100), nullable=True)
    
    # Risk management
    max_alerts_per_day = Column(Integer, nullable=True)
    cooldown_minutes = Column(Integer, nullable=True)
    
    # Status
    is_active = Column(Boolean, default=True)
    last_triggered = Column(DateTime, nullable=True)
    trigger_count = Column(Integer, default=0)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    __table_args__ = (
        Index('idx_user_active', 'user_id', 'is_active'),
        Index('idx_alert_type', 'alert_type', 'is_active'),
    )


class AlertTrigger(Base):
    """Alert trigger history"""
    __tablename__ = "alert_triggers"
    
    id = Column(Integer, primary_key=True, index=True)
    alert_id = Column(String(50), nullable=False, index=True)
    signal_id = Column(String(50), nullable=True, index=True)
    user_id = Column(String(50), nullable=False, index=True)
    
    # Trigger details
    trigger_time = Column(DateTime, nullable=False, index=True)
    trigger_data = Column(JSONB, nullable=False)  # Data that triggered the alert
    
    # Notification status
    notification_sent = Column(Boolean, default=False)
    notification_method = Column(String(20), nullable=True)
    notification_status = Column(String(20), nullable=True)  # 'sent', 'failed', 'pending'
    error_message = Column(Text, nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    __table_args__ = (
        Index('idx_alert_trigger_time', 'alert_id', 'trigger_time'),
        Index('idx_user_trigger_time', 'user_id', 'trigger_time'),
    )


class BacktestResult(Base):
    """Backtesting results"""
    __tablename__ = "backtest_results"
    
    id = Column(Integer, primary_key=True, index=True)
    backtest_id = Column(String(50), unique=True, nullable=False, index=True)
    user_id = Column(String(50), nullable=False, index=True)
    
    # Backtest configuration
    strategy_name = Column(String(100), nullable=False)
    strategy_config = Column(JSONB, nullable=False)
    
    # Time period
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    
    # Assets and parameters
    symbols = Column(JSONB, nullable=False)
    intervals = Column(JSONB, nullable=False)
    initial_capital = Column(Float, nullable=False)
    
    # Performance metrics
    total_return = Column(Float, nullable=False)
    annualized_return = Column(Float, nullable=False)
    sharpe_ratio = Column(Float, nullable=False)
    max_drawdown = Column(Float, nullable=False)
    win_rate = Column(Float, nullable=False)
    profit_factor = Column(Float, nullable=False)
    
    # Trade statistics
    total_trades = Column(Integer, nullable=False)
    winning_trades = Column(Integer, nullable=False)
    losing_trades = Column(Integer, nullable=False)
    avg_win = Column(Float, nullable=False)
    avg_loss = Column(Float, nullable=False)
    
    # Additional metrics
    metrics = Column(JSONB, nullable=True)  # Additional performance metrics
    
    # Status
    status = Column(String(20), nullable=False, default='running')  # 'running', 'completed', 'failed'
    error_message = Column(Text, nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime, nullable=True)
    
    __table_args__ = (
        Index('idx_user_backtest', 'user_id', 'created_at'),
        Index('idx_strategy_backtest', 'strategy_name', 'start_date'),
    )


class TradeExecution(Base):
    """Trade execution records"""
    __tablename__ = "trade_executions"
    
    id = Column(Integer, primary_key=True, index=True)
    execution_id = Column(String(50), unique=True, nullable=False, index=True)
    signal_id = Column(String(50), nullable=False, index=True)
    user_id = Column(String(50), nullable=False, index=True)
    
    # Trade details
    symbol = Column(String(20), nullable=False, index=True)
    exchange = Column(String(20), nullable=False)
    side = Column(String(10), nullable=False)  # 'buy', 'sell'
    order_type = Column(String(20), nullable=False)  # 'market', 'limit', 'stop'
    
    # Execution details
    quantity = Column(Float, nullable=False)
    price = Column(Float, nullable=False)
    executed_quantity = Column(Float, nullable=False)
    average_price = Column(Float, nullable=False)
    fees = Column(Float, nullable=False)
    
    # Timing
    order_time = Column(DateTime, nullable=False, index=True)
    execution_time = Column(DateTime, nullable=True)
    
    # Status
    status = Column(String(20), nullable=False, default='pending')  # 'pending', 'filled', 'partial', 'cancelled', 'rejected'
    exchange_order_id = Column(String(100), nullable=True)
    
    # P&L tracking
    realized_pnl = Column(Float, nullable=True)
    unrealized_pnl = Column(Float, nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    __table_args__ = (
        Index('idx_signal_execution', 'signal_id', 'order_time'),
        Index('idx_user_execution', 'user_id', 'order_time'),
        Index('idx_symbol_execution', 'symbol', 'order_time'),
    )
