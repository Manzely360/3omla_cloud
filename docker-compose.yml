 

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: coinmatcher
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d coinmatcher"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/coinmatcher
      - REDIS_URL=redis://redis:6379
      - ENABLE_WHALE_ANALYSIS=true
      - ACCESS_TOKEN_COOKIE_NAME=3omla_access_token
      - ACCESS_TOKEN_COOKIE_SECURE=false
      - ACCESS_TOKEN_COOKIE_SAMESITE=lax
      - ACCESS_TOKEN_COOKIE_DOMAIN=
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  # Data Ingestion Service
  data-ingestion:
    build:
      context: ./data-ingestion
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/coinmatcher
      - REDIS_URL=redis://redis:6379
      - BINANCE_TESTNET=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data-ingestion:/app
    command: python -m services.binance_websocket
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8001/metrics', timeout=5).status==200 else 1)"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Bybit Data Ingestion Service (public data)
  data-ingestion-bybit:
    build:
      context: ./data-ingestion
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/coinmatcher
      - REDIS_URL=redis://redis:6379
      - BYBIT_TESTNET=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data-ingestion:/app
    command: python -m services.bybit_websocket
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8001/metrics', timeout=5).status==200 else 1)"]
      interval: 30s
      timeout: 5s
      retries: 3

  # KuCoin Poller (public REST via ccxt)
  data-ingestion-kucoin:
    build:
      context: ./data-ingestion
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - KUCOIN_POLL_INTERVAL=1.5
      - KUCOIN_SYMBOLS=BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,XRPUSDT,ADAUSDT,DOGEUSDT,AVAXUSDT,LINKUSDT,MATICUSDT
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./data-ingestion:/app
    command: python -m services.kucoin_poller
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8001/metrics', timeout=5).status==200 else 1)"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Multi-exchange pooler (aggregates Binance, Bybit, KuCoin, Coinbase, Kraken, OKX, Gate, Huobi, Bitfinex, BitMEX)
  data-ingestion-multi:
    build:
      context: ./data-ingestion
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - MARKET_DATA_CHANNEL=market_data_updates
      - EXCHANGE_STATUS_CHANNEL=exchange_status_updates
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./data-ingestion:/app
    command: python -m services.enhanced_multi_exchange_pooler

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
